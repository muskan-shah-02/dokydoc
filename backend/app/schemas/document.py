# This is the content for your NEW file at:
# backend/app/schemas/document.py

from pydantic import BaseModel
from datetime import datetime
from typing import Optional

# --- Base Schema ---
# Contains fields that are common to all other document schemas.
# This avoids code duplication.
class DocumentBase(BaseModel):
    filename: str
    document_type: str
    version: str

# --- Create Schema ---
# This defines the data your API will expect when creating a new document.
# Note that we don't include fields that are generated by the server,
# like id, created_at, owner_id, or storage_path.
class DocumentCreate(DocumentBase):
    pass # It has the same fields as DocumentBase for now

# --- Update Schema ---
# Defines the fields that can be updated after a document is created.
# All fields are optional so a user can update just one thing at a time.
class DocumentUpdate(BaseModel):
    filename: Optional[str] = None
    document_type: Optional[str] = None
    version: Optional[str] = None

# --- Main Document Schema (for API responses) ---
# This is the schema that will be used when returning document data
# from your API to the frontend. It includes all the database fields.
class Document(DocumentBase):
    id: int
    owner_id: int
    storage_path: str
    created_at: datetime

    # This is a Pydantic configuration setting that allows the model
    # to be created from an ORM object (like our SQLAlchemy Document model).
    # It tells Pydantic to read the data from attributes, not just dict keys.
    class Config:
        orm_mode = True

