from typing import TYPE_CHECKING
from datetime import datetime
from sqlalchemy import Integer, String, DateTime, ForeignKey, Text, JSON
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.db.base_class import Base

if TYPE_CHECKING:
    from .user import User  # noqa: F401

class CodeComponent(Base):
    """
    Database model for storing code component metadata.
    This represents a reference to a piece of code, like a file,
    class, function, or entire repository.
    """
    __tablename__ = "code_components"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    
    # A user-friendly name for the component
    name: Mapped[str] = mapped_column(String, index=True, nullable=False)
    
    # The type of component, e.g., "Repository", "File", "Class", "Function"
    component_type: Mapped[str] = mapped_column(String, nullable=False)

    # A URL or path to the code, e.g., a GitHub URL or a file path
    location: Mapped[str] = mapped_column(String, nullable=False)
    
    # The version of the code component, e.g., a git commit hash or a version tag
    version: Mapped[str] = mapped_column(String, nullable=False)
    
    # A high-level, human-readable summary of the code's purpose, generated by AI.
    summary: Mapped[str] = mapped_column(Text, nullable=True)
    
    # Structured data from the analysis, e.g., list of functions, classes, dependencies.
    # Stored as a flexible JSON object for efficient querying.
    structured_analysis: Mapped[dict] = mapped_column(JSON, nullable=True)
    
    # The status of the background analysis job. This is critical for the frontend
    # to track progress and handle failures.
    analysis_status: Mapped[str] = mapped_column(String, default="pending", index=True, nullable=False) # "pending", "processing", "completed", "failed"
   
    # Foreign key to link this component to the user who registered it
    owner_id: Mapped[int] = mapped_column(Integer, ForeignKey("users.id"))
    
    # Creates a relationship to the User model
    owner: Mapped["User"] = relationship("User")
    
    # Timestamp fields
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, nullable=False)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now, nullable=False)

